
// Получает параметры подключения
//
// Параметры:
//  ОбъектИнициатор		 - ПланОбменаСсылка.QIWI_АдаптерВнешниеСистемы
//						 - СправочникСсылка.QIWI_АдаптерПодключенияКВнешнимСистемам
//						 	Объект, оносительно которого определяются настройки
//  ИнтерфейсТранспорта	 - ПеречислениеСсылка.QIWI_АдаптерИнтерфейсыТранспорта
//  
//	Возвращаемое значение:
//  Структура - необходимые параметры для подключения:
//   * ПсевдоПодключение - Булево 
//   * ПараметрыПодключенияСсылка - СправочникСсылка.QIWI_АдаптерПодключенияКВнешнимСистемам, Неопределено - 
//   						Ссылка на справочник в котором храняться параметры.
//	 * ИнтерфейсТранспорта - ПеречислениеСсылка.QIWI_АдаптерИнтерфейсыТранспорта, Неопределено, Произвольный -
//	 							Неопределенный тип в случае ошибок. 
//	 Остальные поля в соответствие с интерфейсом транспорта (см. код)
//
Функция ПолучитьПараметрыПодключения(ОбъектИнициатор, ИнтерфейсТранспорта = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура;	
	СтруктураПараметров.Вставить("ПсевдоПодключение", Ложь);
	СтруктураПараметров.Вставить("ПараметрыПодключенияСсылка", Неопределено);
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Ссылка", ОбъектИнициатор);
			
	Если ТипЗнч(ОбъектИнициатор) = Тип("ПланОбменаСсылка.QIWI_АдаптерВнешниеСистемы") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВнешниеСистемы.ПараметрыПодключения КАК ПараметрыПодключенияСсылка
		|ПОМЕСТИТЬ ВТ_ПараметрыПодключения
		|ИЗ
		|	ПланОбмена.QIWI_АдаптерВнешниеСистемы КАК ВнешниеСистемы
		|ГДЕ
		|	ВнешниеСистемы.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(ОбъектИнициатор) = Тип("СправочникСсылка.QIWI_АдаптерПодключенияКВнешнимСистемам") Тогда		
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПараметрыПодключения.Ссылка КАК ПараметрыПодключенияСсылка
		|ПОМЕСТИТЬ ВТ_ПараметрыПодключения
		|ИЗ
		|	Справочник.QIWI_АдаптерПодключенияКВнешнимСистемам КАК ПараметрыПодключения
		|ГДЕ
		|	ПараметрыПодключения.Ссылка = &Ссылка";
		
	Иначе
		ПредставлениеИнициатора = Строка(ОбъектИнициатор);
		ТекстИсключения = СтрШаблон("Некорректный объект инициатор для получения параметров  подключения! "
									+ "Внешняя система: %1.",
									ПредставлениеИнициатора);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли; 	 
	
	ТекстЗапроса = ТекстЗапроса + " ; " +
	"ВЫБРАТЬ
	|	ПП.ПараметрыПодключенияСсылка КАК ПараметрыПодключенияСсылка,
	|	ПП.ПараметрыПодключенияСсылка.ИнтерфейсТранспортаПоУмолчанию КАК ИнтерфейсТранспорта,
	|	ПП.ПараметрыПодключенияСсылка.ПсевдоПодключение КАК ПсевдоПодключение,
	|	ПП.ПараметрыПодключенияСсылка.WSИмяСервиса КАК WSИмяСервиса,
	|	ПП.ПараметрыПодключенияСсылка.WSИмяТочкиПодключения КАК WSИмяТочкиПодключения,
	|	ПП.ПараметрыПодключенияСсылка.WSСсылкаWSDL КАК WSСсылкаWSDL,
	|	ПП.ПараметрыПодключенияСсылка.WSURIПространстваИменСервиса КАК WSURIПространстваИменСервиса,
	|	ПП.ПараметрыПодключенияСсылка.WSПользовательПрокси КАК WSПользовательПрокси,
	|	ПП.ПараметрыПодключенияСсылка.WSПользовательОпределения КАК WSПользовательОпределения,
	|	ПП.ПараметрыПодключенияСсылка.WSАутентификацияОС КАК WSАутентификацияОС,
	|	ПП.ПараметрыПодключенияСсылка.WSАутентификацияОСОпределения КАК WSАутентификацияОСОпределения,
	|	ПП.ПараметрыПодключенияСсылка.WSТаймаут КАК WSТаймаут,
	|	ПП.ПараметрыПодключенияСсылка.HTTPАдресСервиса КАК HTTPАдресСервиса,
	|	ПП.ПараметрыПодключенияСсылка.HTTPПользователь КАК HTTPПользователь,
	|	ПП.ПараметрыПодключенияСсылка.HTTPРесурсНаСервере КАК HTTPРесурсНаСервере,
	|	ПП.ПараметрыПодключенияСсылка.HTTPЗащищенноеСоединение КАК HTTPЗащищенноеСоединение,
	|	ПП.ПараметрыПодключенияСсылка.HTTPТаймаут КАК HTTPТаймаут,
	|	ПП.ПараметрыПодключенияСсылка.HTTPАутентификацияОС КАК HTTPАутентификацияОС,
	|	ПП.ПараметрыПодключенияСсылка.HTTPПорт КАК HTTPПорт,
	|	ПП.ПараметрыПодключенияСсылка.COMФайловаяБазаКорреспондент КАК COMФайловаяБазаКорреспондент,
	|	ПП.ПараметрыПодключенияСсылка.COMИмяПользователя КАК COMИмяПользователя,
	|	ПП.ПараметрыПодключенияСсылка.COMИмяСервера1СПредприятия КАК COMИмяСервера1СПредприятия,
	|	ПП.ПараметрыПодключенияСсылка.COMИмяБазыНаСервере1СПредприятия КАК COMИмяБазыНаСервере1СПредприятия,
	|	ПП.ПараметрыПодключенияСсылка.COMКаталогИнформационнойБазы КАК COMКаталогИнформационнойБазы,
	|	ПП.ПараметрыПодключенияСсылка.COMАутентификацияОперационнойСистемы КАК COMАутентификацияОперационнойСистемы,
	|	ПП.ПараметрыПодключенияСсылка.ExtSysСтрокаПодключения КАК ExtSysСтрокаПодключения,
	|	ПП.ПараметрыПодключенияСсылка.ExtSysИмяПользователя КАК ExtSysИмяПользователя,
	|	ПП.ПараметрыПодключенияСсылка.ExtSysИмяПриложенияCOM КАК ExtSysИмяПриложенияCOM
	|ИЗ
	|	ВТ_ПараметрыПодключения КАК ПП"; 		
	
	Запрос.Текст = ТекстЗапроса;			
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		ПредставлениеИнициатора = Строка(ОбъектИнициатор);
		ТекстИсключения = СтрШаблон("Не удалось определить параметры подключения "
										+ "Внешняя система: %1. ",
										ПредставлениеИнициатора);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
		
	Если ИнтерфейсТранспорта = Неопределено Тогда
		ИнтерфейсТранспорта = Выборка.ИнтерфейсТранспорта;
	КонецЕсли;		
	
	Если ИнтерфейсТранспорта = Перечисления.QIWI_АдаптерИнтерфейсыТранспорта.WebService Тогда
		
		ПаролиДляПолучения = "WSПароль,WSПарольОпределения";
		
		СтруктураПараметров.Вставить("WSСсылкаWSDL", "");
		СтруктураПараметров.Вставить("WSПользовательОпределения", "");
		СтруктураПараметров.Вставить("WSПарольОпределения", "");
		СтруктураПараметров.Вставить("WSАутентификацияОСОпределения", Ложь);
		СтруктураПараметров.Вставить("WSURIПространстваИменСервиса", "");
		СтруктураПараметров.Вставить("WSИмяСервиса", "");
		СтруктураПараметров.Вставить("WSИмяТочкиПодключения", "");
		СтруктураПараметров.Вставить("WSПользовательПрокси", "");
		СтруктураПараметров.Вставить("WSПароль", "");
		СтруктураПараметров.Вставить("WSАутентификацияОС", Ложь);
		СтруктураПараметров.Вставить("WSТаймаут", 0);
		
	ИначеЕсли ИнтерфейсТранспорта = Перечисления.QIWI_АдаптерИнтерфейсыТранспорта.HttpService Тогда
		
		ПаролиДляПолучения = "HTTPПароль";
		
		СтруктураПараметров.Вставить("HTTPАдресСервиса", "");
		СтруктураПараметров.Вставить("HTTPПользователь", "");
		СтруктураПараметров.Вставить("HTTPРесурсНаСервере", "");
		СтруктураПараметров.Вставить("HTTPЗащищенноеСоединение", Ложь);
		СтруктураПараметров.Вставить("HTTPПароль", "");
		СтруктураПараметров.Вставить("HTTPТаймаут", 0);
		СтруктураПараметров.Вставить("HTTPАутентификацияОС", Ложь);
		ТипПорт = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный));
		СтруктураПараметров.Вставить("HTTPПорт", ТипПорт.ПривестиЗначение());
		
	ИначеЕсли ИнтерфейсТранспорта = Перечисления.QIWI_АдаптерИнтерфейсыТранспорта.COM Тогда
		
		ПаролиДляПолучения = "COMПароль";
		СтруктураПараметров.Вставить("COMФайловаяБазаКорреспондент", Ложь);
		СтруктураПараметров.Вставить("COMИмяПользователя", "");
		СтруктураПараметров.Вставить("COMПароль", "");
		СтруктураПараметров.Вставить("COMАутентификацияОперационнойСистемы", Ложь);
		СтруктураПараметров.Вставить("COMИмяСервера1СПредприятия", "");
		СтруктураПараметров.Вставить("COMИмяБазыНаСервере1СПредприятия", "");
		СтруктураПараметров.Вставить("COMКаталогИнформационнойБазы", "");
		
	ИначеЕсли ИнтерфейсТранспорта = Перечисления.QIWI_АдаптерИнтерфейсыТранспорта.ExternalSystem Тогда
		
		ПаролиДляПолучения = "ExtSysПароль";
		СтруктураПараметров.Вставить("ExtSysСтрокаПодключения", "");
		СтруктураПараметров.Вставить("ExtSysИмяПользователя", "");
		СтруктураПараметров.Вставить("ExtSysПароль", "");
		СтруктураПараметров.Вставить("ExtSysИмяПриложенияCOM", "");
		
	Иначе	
		ПредставлениеИнициатора = Строка(ОбъектИнициатор);					
		ТекстИсключения = СтрШаблон("Не удалось определить параметры подключения - не указан интерфейс транспорта "
									+ "Внешняя система: %1. ",
									ПредставлениеИнициатора);
		ВызватьИсключение ТекстИсключения;

	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
	СтруктураПараметров.Вставить("ИнтерфейсТранспорта", ИнтерфейсТранспорта);		
	
	УстановитьПривилегированныйРежим(Истина);
	Пароли = QIWI_АдаптерШлюзБСПСервер.ПрочитатьДанныеИзБезопасногоХранилища(Выборка.ПараметрыПодключенияСсылка,
																				ПаролиДляПолучения);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОдинПароль = ?(ТипЗнч(Пароли) = Тип("Структура"), Ложь, Истина);
	
	МассивПаролей = СтрРазделить(ПаролиДляПолучения, ",", Ложь);
	Для Каждого ПарольПараметров Из МассивПаролей Цикл
		Если ОдинПароль Тогда
			СтруктураПараметров[ПарольПараметров] = Пароли;
			Прервать;
		Иначе
			СтруктураПараметров[ПарольПараметров] = Пароли[ПарольПараметров];
		КонецЕсли;
	КонецЦикла;
		
	Возврат СтруктураПараметров;
	
КонецФункции 	

Функция ПолучитьАдресатовИнтеграционногоПроцесса(Процесс, Назначение = "ДляУведомленийОбОшибках") Экспорт
	
	Адресаты = Новый ТаблицаЗначений;
	Адресаты.Колонки.Добавить("Адрес", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	Адресаты.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	QIWI_АдаптерИнтеграционныеПроцессыАдресаты.Пользователь КАК Пользователь
	|ИЗ
	|	Справочник.QIWI_АдаптерИнтеграционныеПроцессы.Адресаты КАК QIWI_АдаптерИнтеграционныеПроцессыАдресаты
	|ГДЕ
	|	QIWI_АдаптерИнтеграционныеПроцессыАдресаты.Ссылка = &Процесс
	|	И ВЫБОР
	|			КОГДА &Назначение = ""ДляШтатныхУведомлений""
	|				ТОГДА QIWI_АдаптерИнтеграционныеПроцессыАдресаты.ДляШтатныхУведомлений = ИСТИНА
	|			ИНАЧЕ QIWI_АдаптерИнтеграционныеПроцессыАдресаты.ДляУведомленийОбОшибках = ИСТИНА
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("Назначение", Назначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Адресаты;
	КонецЕсли;
		
	Получатели = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	// Используются в составе БСП
	ТипКИ = Перечисления["ТипыКонтактнойИнформации"].АдресЭлектроннойПочты;	
	ВидКИ = Справочники["ВидыКонтактнойИнформации"].EmailПользователя;
	ПочтовыеАдреса = QIWI_АдаптерШлюзБСПСервер.КонтактнаяИнформацияОбъектов(Получатели, ТипКИ, ВидКИ);
		
	Для Каждого ЭлементКИ Из ПочтовыеАдреса Цикл		
		НовСтрока = Адресаты.Добавить();
		НовСтрока.Адрес = ЭлементКИ.Представление;
		НовСтрока.Представление = Строка(ЭлементКИ.Объект);
	КонецЦикла;
	
	Возврат Адресаты;
	
КонецФункции

#Область РаботаСИсходящимиСообщениями //*******************************************

Функция РеквизитыНастроекСообщений(НастройкаСсылка, СтрРеквизитыОбработчика) Экспорт
	
	РеквизитыОбработчика = QIWI_АдаптерШлюзБСПСервер.ЗначенияРеквизитовОбъекта(НастройкаСсылка, СтрРеквизитыОбработчика);
	Возврат РеквизитыОбработчика;
	
КонецФункции	

#КонецОбласти // РаботаСИсходящимиСообщениями

#Область РаботаСВходящимиСообщениями //*******************************************

Функция ОпределитьТипВходящегоСообщения(МнемокодСообщения) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	QIWI_АдаптерТипВходящегоСообщения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.QIWI_АдаптерТипВходящегоСообщения КАК QIWI_АдаптерТипВходящегоСообщения
	|ГДЕ
	|	QIWI_АдаптерТипВходящегоСообщения.ТехническоеИмя = &ТехническоеИмя";
	Запрос.УстановитьПараметр("ТехническоеИмя", МнемокодСообщения);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат Неопределено;		
	КонецЕсли;
	
КонецФункции

#КонецОбласти // РаботаСВходящимиСообщениями   

#Область Служебные //*************************************************

Функция ТекущийПользователь() Экспорт
	
	Возврат QIWI_АдаптерШлюзБСПСервер.ТекущийПользователь();
	
КонецФункции	

#КонецОбласти // Служебные