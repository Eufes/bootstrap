
Функция ПолучитьФабрикуXDTOПоВерсииСхемИнтеграции(ВерсияСхемы) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВерсияСхемы) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВерсияСхемы.ИспользоватьВстроеннуюСхему тогда
		Возврат ФабрикаXDTO;
	КонецЕсли;
	
	АрхивФабрикаXDTOВерсии = ВерсияСхемы.ХранилищеАрхиваXSDСхем.Получить();
	
	Если АрхивФабрикаXDTOВерсии = Неопределено ИЛИ ТипЗнч(АрхивФабрикаXDTOВерсии) <>  Тип("ДвоичныеДанные") тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
	
	АрхивФабрикаXDTOВерсии.Записать(ИмяАрхива);
	
	ИмяКаталога = СтрЗаменить(ИмяАрхива, ".zip", "_zip");
	
	СоздатьКаталог(ИмяКаталога);
	
	Архив = Новый ЧтениеZipФайла(ИмяАрхива);
	Архив.ИзвлечьВсе(ИмяКаталога, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	Попытка
		УдалитьФайлы(ИмяАрхива);
	Исключение;	
	КонецПопытки;
	
	МассивФайловXSD = НайтиФайлы(ИмяКаталога, "*.xsd", Ложь);
	
	Возврат QIWI_АдаптерОбщегоНазначения.СоздатьФабрикуXDTOИзМассиваФайлов(МассивФайловXSD);
	
КонецФункции

Функция ПолучитьФабрикуXDTOиНаборСхемПоВерсииСхемИнтеграции(ВерсияСхемы) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВерсияСхемы) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВерсияСхемы.ИспользоватьВстроеннуюСхему тогда
		Возврат Новый Структура("ФабрикаXDTO, НаборСхемXML", ФабрикаXDTO, Неопределено);
	КонецЕсли;
	
	АрхивФабрикаXDTOВерсии = ВерсияСхемы.ХранилищеАрхиваXSDСхем.Получить();
	
	Если АрхивФабрикаXDTOВерсии = Неопределено ИЛИ ТипЗнч(АрхивФабрикаXDTOВерсии) <>  Тип("ДвоичныеДанные") тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
	
	АрхивФабрикаXDTOВерсии.Записать(ИмяАрхива);
	
	ИмяКаталога = СтрЗаменить(ИмяАрхива, ".zip", "_zip");
	
	СоздатьКаталог(ИмяКаталога);
	
	Архив = Новый ЧтениеZipФайла(ИмяАрхива);
	Архив.ИзвлечьВсе(ИмяКаталога, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	Попытка
		УдалитьФайлы(ИмяАрхива);
	Исключение;	
	КонецПопытки;
	
	МассивФайловXSD = НайтиФайлы(ИмяКаталога, "*.xsd", Ложь);
	
	Возврат QIWI_АдаптерОбщегоНазначения.ПолучитьФабрикуXDTOИНаборСхемИзМассиваФайлов(МассивФайловXSD);
	
КонецФункции


#Область РаботаСИсходящимиСообщениями //*******************************************

Функция ОпределитьТипИсходящегоСообщения(МнемокодСообщения) Экспорт

	//Запрос=
	
КонецФункции

Функция ВнешняяСистемаПоТипуИсходящегоСообщения(ТипИсходящегоСообщения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипИсходящегоСообщения.Владелец КАК ВнешняяСистема
	|ИЗ
	|	Справочник.QIWI_АдаптерТипИсходящегоСообщения КАК ТипИсходящегоСообщения
	|ГДЕ
	|	ТипИсходящегоСообщения.Ссылка = &ТипИсходящегоСообщения";
	Запрос.УстановитьПараметр("ТипИсходящегоСообщения", ТипИсходящегоСообщения);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВнешняяСистема;				
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

#КонецОбласти // РаботаСИсходящимиСообщениями

#Область РаботаСВходящимиСообщениями //*******************************************

Функция ОпределитьТипВходящегоСообщения(МнемокодСообщения, ВнешняяСистема) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	QIWI_АдаптерТипВходящегоСообщения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.QIWI_АдаптерТипВходящегоСообщения КАК QIWI_АдаптерТипВходящегоСообщения
	|ГДЕ
	|	QIWI_АдаптерТипВходящегоСообщения.ТехническоеИмя = &ТехническоеИмя
	|	И QIWI_АдаптерТипВходящегоСообщения.Владелец = &ВнешняяСистема";
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	Запрос.УстановитьПараметр("ТехническоеИмя", МнемокодСообщения);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе	
		Возврат Неопределено;		
	КонецЕсли;
	
КонецФункции

Функция ВнешняяСистемаПоТипуВходящегоСообщения(ТипВходящегоСообщения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипВходящегоСообщения.Владелец КАК ВнешняяСистема
	|ИЗ
	|	Справочник.QIWI_АдаптерТипВходящегоСообщения КАК ТипВходящегоСообщения
	|ГДЕ
	|	ТипВходящегоСообщения.Ссылка = &ТипВходящегоСообщения";
	Запрос.УстановитьПараметр("ТипВходящегоСообщения", ТипВходящегоСообщения);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВнешняяСистема;				
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

Функция СверитьПользователяВнешнейСистемы(ВнешняяСистема, ТекущийПользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	QIWI_АдаптерВнешниеСистемы.ПользовательСоединения КАК ПользовательСоединения
	|ИЗ
	|	ПланОбмена.QIWI_АдаптерВнешниеСистемы КАК QIWI_АдаптерВнешниеСистемы
	|ГДЕ
	|	QIWI_АдаптерВнешниеСистемы.Ссылка = &ВнешняяСистема";
	Запрос.УстановитьПараметр("ВнешняяСистема", ВнешняяСистема);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ЗначениеЗаполнено(Выборка.ПользовательСоединения) Тогда
			Возврат Выборка.ПользовательСоединения = ТекущийПользователь;
		Иначе
			Возврат Истина;
		КонецЕсли;	
	Иначе
		Возврат Ложь;
	КонецЕсли;		
	
КонецФункции	

#КонецОбласти // РаботаСВходящимиСообщениями
