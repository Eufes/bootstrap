
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
			
	ОбновитьИнформациюОТекущемРасписании("РасписаниеПодготовкаИсходящихНовое", "ИДРеглЗаданияПодготовкаИсходящих", Ложь);
	ОбновитьИнформациюОТекущемРасписании("РасписаниеОтправкаИсходящихНовое", "ИДРеглЗаданияОтправкаИсходящих", Ложь);
	
	Если Объект.ЭтотУзел Тогда
		Элементы.ГруппаРеглОбработкаВходящих.Видимость = Ложь;
		Элементы.ПараметрыПодключения.Видимость = Ложь;		
	Иначе
		ОбновитьИнформациюОТекущемРасписании("РасписаниеОбработкаВходящихНовое", "ИДРеглЗаданияОбработкаВходящих", Ложь);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	Если ЗначениеЗаполнено(РасписаниеПодготовкаИсходящихНовое) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РасписаниеПодготовкаИсходящихНовое",
		РасписаниеПодготовкаИсходящихНовое);
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(РасписаниеОтправкаИсходящихНовое) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РасписаниеОтправкаИсходящихНовое",
		РасписаниеОтправкаИсходящихНовое);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасписаниеОбработкаВходящихНовое) Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("РасписаниеОбработкаВходящихНовое",
		РасписаниеОбработкаВходящихНовое);
	КонецЕсли;
		
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РасписаниеПодготовкаИсходящихВключено",
													РасписаниеПодготовкаИсходящихВключено);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РасписаниеОтправкаИсходящихВключено",
													РасписаниеОтправкаИсходящихВключено);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РасписаниеОбработкаВходящихВключено",
													РасписаниеОбработкаВходящихВключено);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РасписаниеПодготовкаИсходящихНовое = "";
	РасписаниеОтправкаИсходящихНовое = "";
	РасписаниеОбработкаВходящихНовое = "";	
	
	ОбновитьИнформациюОТекущемРасписании("РасписаниеПодготовкаИсходящихНовое", "ИДРеглЗаданияПодготовкаИсходящих");
	ОбновитьИнформациюОТекущемРасписании("РасписаниеОтправкаИсходящихНовое", "ИДРеглЗаданияОтправкаИсходящих");
	ОбновитьИнформациюОТекущемРасписании("РасписаниеОбработкаВходящихНовое", "ИДРеглЗаданияОбработкаВходящих");
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбменВключенПриИзменении(Элемент)
	ТекстЗначения = ?(Объект.ОбменВключен, "Доступны", "Отключены");
	ТекстИнформации = ТекстЗначения + " регламентные задания по внешней системе";
	ПоказатьОповещениеПользователя(ТекстИнформации);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РасписаниеПодготовкаИсходящихТекущееНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
   СтандартнаяОбработка = Ложь;
   НастроитьРасписание("РасписаниеПодготовкаИсходящихНовое", "ИДРеглЗаданияПодготовкаИсходящих");
	
КонецПроцедуры 

&НаКлиенте
Процедура РасписаниеОтправкаИсходящихТекущееНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
   	НастроитьРасписание("РасписаниеОтправкаИсходящихНовое", "ИДРеглЗаданияОтправкаИсходящих");
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеОбработкаВходящихТекущееНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
   	НастроитьРасписание("РасписаниеОбработкаВходящихНовое", "ИДРеглЗаданияОбработкаВходящих");

КонецПроцедуры

&НаКлиенте
Процедура РасписаниеПодготовкаИсходящихВключеноПриИзменении(Элемент)
	ВключениеОтключениРасписания("ИДРеглЗаданияПодготовкаИсходящих", "РасписаниеПодготовкаИсходящихВключено");
	ОбновитьИнформациюОТекущемРасписании("РасписаниеПодготовкаИсходящихНовое", "ИДРеглЗаданияПодготовкаИсходящих",
								Не РасписаниеПодготовкаИсходящихВключено);
КонецПроцедуры 

&НаКлиенте
Процедура РасписаниеОтправкаИсходящихВключеноПриИзменении(Элемент)
	ВключениеОтключениРасписания("ИДРеглЗаданияОтправкаИсходящих", "РасписаниеОтправкаИсходящихВключено");
	ОбновитьИнформациюОТекущемРасписании("РасписаниеОтправкаИсходящихНовое", "ИДРеглЗаданияОтправкаИсходящих",
								Не РасписаниеОтправкаИсходящихВключено);	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеОбработкаВходящихВключеноПриИзменении(Элемент)
	ВключениеОтключениРасписания("ИДРеглЗаданияОбработкаВходящих", "РасписаниеОбработкаВходящихВключено");
	ОбновитьИнформациюОТекущемРасписании("РасписаниеОбработкаВходящихНовое", "ИДРеглЗаданияОбработкаВходящих",
								Не РасписаниеОбработкаВходящихВключено);
КонецПроцедуры
  
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НастроитьРасписание(ИмяРеквизитаНовогоРасписания, ИмяИдентификатораЗадания)
		
	НовоеРасписание = ЭтотОбъект[ИмяРеквизитаНовогоРасписания];
	ИДРеглЗадания = Объект[ИмяИдентификатораЗадания];
	
	Если ЗначениеЗаполнено(НовоеРасписание) Тогда
		Расписание = РасписаниеСериализатор(НовоеРасписание);
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания;
	ИначеЕсли Не ЗначениеЗаполнено(ИДРеглЗадания) Тогда
		Расписание = Новый РасписаниеРегламентногоЗадания;
	Иначе
		Расписание = РасписаниеРегламентногоЗадания(ИДРеглЗадания);
		Если Расписание = Неопределено Тогда
			Расписание = Новый РасписаниеРегламентногоЗадания;
		КонецЕсли;	
	КонецЕсли;
	
	Если Расписание <> Неопределено Тогда
		ДиалогНастройкиРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
		ДопПараметры = Новый Структура("ИмяРеквизитаНовогоРасписания, ИмяИдентификатораЗадания",
											ИмяРеквизитаНовогоРасписания, ИмяИдентификатораЗадания);
		ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеВыбор", ЭтаФорма, ДопПараметры);
		ДиалогНастройкиРасписания.Показать(ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(, "Регламентное задание отсутствует");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеВыбор(Расписание, ДополнительныеПараметры) Экспорт
	
	ИмяРеквизитаНовогоРасписания = ДополнительныеПараметры.ИмяРеквизитаНовогоРасписания;
	ИмяИдентификатораЗадания = ДополнительныеПараметры.ИмяИдентификатораЗадания;
	
	Если ТипЗнч(Расписание) = Тип("РасписаниеРегламентногоЗадания") Тогда 		
		
		ИмяРеквизитаРасписаниеВключено = СтрЗаменить(ИмяРеквизитаНовогоРасписания, "Новое", "Включено");
		ЭтотОбъект[ИмяРеквизитаРасписаниеВключено] = Истина;
		
		НастроитьРасписаниеВыборСервер(Расписание, ИмяРеквизитаНовогоРасписания);
		Модифицированность = Истина;		
	КонецЕсли;
	
	ОбновитьИнформациюОТекущемРасписании(ИмяРеквизитаНовогоРасписания, ИмяИдентификатораЗадания);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРасписаниеВыборСервер(Расписание, ИмяРеквизитаНовогоРасписания)
	
	ПереносСтрок = ПереносСтрокJSON.Авто;
	СимволыОтступа = Символы.Таб;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрок, СимволыОтступа);
		
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Расписание);
	ЭтотОбъект[ИмяРеквизитаНовогоРасписания] = ЗаписьJSON.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОТекущемРасписании(ИмяРеквизитаНовогоРасписания, ИмяИдентификатораЗадания, Изменено = Истина)
	
	НовоеРасписание = ЭтотОбъект[ИмяРеквизитаНовогоРасписания];
	ИДРеглЗадания = Объект[ИмяИдентификатораЗадания];
	ИмяРеквизитаРасписаниеВключено = СтрЗаменить(ИмяРеквизитаНовогоРасписания, "Новое", "Включено");
	
	Если ЗначениеЗаполнено(ИДРеглЗадания) Тогда
		Элементы[ИмяРеквизитаРасписаниеВключено].Доступность = Истина;
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИДРеглЗадания);
		Если РегламентноеЗадание <> Неопределено Тогда
			Если РегламентноеЗадание.Использование = Истина Тогда				
				ТекущееРасписание = "" + РегламентноеЗадание.Расписание;
				Если ЗначениеЗаполнено(НовоеРасписание) Тогда
					ЧтениеJSON = Новый ЧтениеJSON;
					ЧтениеJSON.УстановитьСтроку(НовоеРасписание);
					ТекущееРасписание = "" + СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON, Тип("РасписаниеРегламентногоЗадания"));
				КонецЕсли;
			Иначе
				ТекущееРасписание = "Выключено. " + РегламентноеЗадание.Расписание;
				ЭтотОбъект[ИмяРеквизитаРасписаниеВключено] = Ложь;
			КонецЕсли;
			
			ЭтотОбъект[ИмяРеквизитаРасписаниеВключено] = РегламентноеЗадание.Использование;
		Иначе
			Если Изменено Тогда
				ТекущееРасписание = "Регламентное задание создаётся (если необходимо) автоматически при записи элемента";
			Иначе
				ТекущееРасписание = "";
			КонецЕсли;			
			ЭтотОбъект[ИмяРеквизитаРасписаниеВключено] = Ложь;
		КонецЕсли;
	Иначе
		Элементы[ИмяРеквизитаРасписаниеВключено].Доступность = Ложь;
		ЭтотОбъект[ИмяРеквизитаРасписаниеВключено] = Ложь;
		Если Изменено Тогда
			ТекущееРасписание = "Регламентное задание создаётся (если необходимо) автоматически при записи элемента";
		Иначе
			ТекущееРасписание = "";
		КонецЕсли;
	КонецЕсли;
	
	ИмяРеквизитаТекущегоРасписания = СтрЗаменить(ИмяРеквизитаНовогоРасписания, "Новое", "Текущее");
	ЭтотОбъект[ИмяРеквизитаТекущегоРасписания] = ТекущееРасписание; 
			
КонецПроцедуры 

&НаСервереБезКонтекста
Функция РасписаниеРегламентногоЗадания(ИдентификаторЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	УстановитьПривилегированныйРежим(Ложь);
	Если РегламентноеЗадание = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат РегламентноеЗадание.Расписание;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция РасписаниеСериализатор(НовоеРасписание)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(НовоеРасписание);
	Расписание = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON, Тип("РасписаниеРегламентногоЗадания"));
	
	Возврат Расписание;
	
КонецФункции

&НаСервере
Процедура ВключениеОтключениРасписания(ИмяИдентификатораЗадания, ИмяРеквизитаРасписаниеВключено)
		
	ИДРеглЗадания = Объект[ИмяИдентификатораЗадания];
	РасписаниеВключено = ЭтотОбъект[ИмяРеквизитаРасписаниеВключено];	
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИДРеглЗадания);
	Если РегламентноеЗадание <> Неопределено Тогда		
		РегламентноеЗадание.Использование = РасписаниеВключено;				
		РегламентноеЗадание.Записать();
		ЭтотОбъект.Модифицированность = Истина;
	Иначе	
		ЭтотОбъект[ИмяРеквизитаРасписаниеВключено] = Не РасписаниеВключено;		
	КонецЕсли;	

КонецПроцедуры		

&НаКлиенте
Процедура ОткрытьКонсольРегламентныхЗаданий(Команда)
	
	//@skip-warning
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма",
	             ,
	             ЭтотОбъект,
	             Ложь);
КонецПроцедуры
           
#КонецОбласти


