
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокДинамическихСписков.Очистить();
	СписокДинамическихСписков.Добавить("ДС_НастройкиТиповСообщений");
	СписокДинамическихСписков.Добавить("ДС_СостояниеОбъектовОбмена");
	СписокДинамическихСписков.Добавить("ОбщийЛогАаптера");
	
	// Соответствие страниц динамическим спискам
	СоответствиеСтраницДС = Новый Соответствие;
	СоответствиеСтраницДС.Вставить("СтраницаНастройкиТиповСообщений", "ДС_НастройкиТиповСообщений");
	СоответствиеСтраницДС.Вставить("СтраницаРегистры", 				  "ДС_НастройкиТиповСообщений");
	
	СоответствиеСтраницДС.Вставить("СтраницаСостоянияОбъектовОбмена", "ДС_СостояниеОбъектовОбмена");	 
	СоответствиеСтраницДС.Вставить("СтраницаРучноеУправление", "ОбщийЛогАаптера");
	СтраницыДС = Новый ФиксированноеСоответствие(СоответствиеСтраницДС);
	
	
	Для Каждого ДС Из СписокДинамическихСписков Цикл
		
		// Для исключения автоматического выполнения запросов всех динамических списков
		// устанавливаем запрет через специальный параметр формирования 
		УстановленПараметрФормирования = Этаформа[ДС.Значение].Параметры.Элементы.Найти("Формировать");
		Если УстановленПараметрФормирования <> Неопределено Тогда
			УстановленПараметрФормирования.Использование = Истина;
			УстановленПараметрФормирования.Значение = Ложь;
		Иначе
			ТекстОшибки = "Проверьте наличие параметра ""формировать"" у динамического списка " + ДС.Значение;
			QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
	КонецЦикла; 	
	
	// Для карты
	СоответствиеОбъектовИФормВР = Новый Соответствие;
	СоответствиеОбъектовИФормВР.Вставить("ПараметрыПодключений",
											"Справочник.QIWI_АдаптерПодключенияКВнешнимСистемам.ФормаСписка");
	СоответствиеОбъектовИФормВР.Вставить("ТипыИсходящихСообщений",
											"Справочник.QIWI_АдаптерТипИсходящегоСообщения.ФормаСписка");
	СоответствиеОбъектовИФормВР.Вставить("ТипыВходящихСообщений",
											"Справочник.QIWI_АдаптерТипВходящегоСообщения.ФормаСписка");
	СоответствиеОбъектовИФормВР.Вставить("ИнтеграционныеПроцессы",
											"Справочник.QIWI_АдаптерИнтеграционныеПроцессы.ФормаСписка");
	СоответствиеОбъектовИФормВР.Вставить("ВнешниеСистемы",
											"ПланОбмена.QIWI_АдаптерВнешниеСистемы.ФормаСписка");
	СоответствиеОбъектовИФормВР.Вставить("РегламентныеЗадания",
											"Обработка.РегламентныеИФоновыеЗадания.Форма");
	СоответствиеОбъектовИФормВР.Вставить("НастройкиДляТиповСообщений",
											"РегистрСведений.QIWI_АдаптерИспользуемыеНастройкиДляСообщений.ФормаСписка");
	СоответствиеОбъектовИФормВР.Вставить("ПодпискиНаСобытия",
											"РегистрСведений.QIWI_АдаптерПодпискиОбмена.ФормаСписка");
	СоответствиеОбъектовИФорм = Новый ФиксированноеСоответствие(СоответствиеОбъектовИФормВР);
	
	ОбновитьДоступностьАдаптераНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Для началььной страницы обновляем данные динамического списка
	ДинамическийСписокПриСменеСтраницы(Элементы.СтраницаРучноеУправление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранныеЗначения)
	
	Если ТипЗнч(ВыбранныеЗначения) = Тип("Структура") Тогда
		
		РезультатЗапроса = ПолучитьИзВременногоХранилища(ВыбранныеЗначения.ДанныеВыбора);
		
		Если ТипЗнч(РезультатЗапроса) = Тип("Массив") Тогда
			
			РезультатЗапроса = РезультатЗапроса[РезультатЗапроса.ВГраница()];
			
			Если РезультатЗапроса.Колонки.Найти("Ссылка") <> Неопределено Тогда
				ВыбранныеСсылки = РезультатЗапроса.Выгрузить();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВыбранныеСсылки = ВыбранныеЗначения;
		
	КонецЕсли;
	
	Для Каждого Значение Из ВыбранныеСсылки Цикл
		
		НоваяСтрока = СписокЗарегистрированныхИсходящихСообщений.Добавить();
		НоваяСтрока.ИсходящееСообщение = Значение.Ссылка;
				
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции   

#Область РаботаСИсходящими //*************************************************

&НаКлиенте
Процедура КодФормированияПроизвольныхДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	КодФормированияПроизвольныхДанных =
	"СтруктураДанных = Новый Структура(""СохранитьНаДиск"", Ложь);
	|ПроизвольныеДанные = СтруктураДанных;
	|";
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИсходящееСообщение(Команда)
	
	Если Не ЗначениеЗаполнено(ВыбраннаяВнешняяСистема) Тогда
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю("Не выбрана внешняя система",
				, "ВыбраннаяВнешняяСистема");		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыгружаемыйОбъектСсылка) Тогда
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю("Не указан выгружаемый объект",
				, "ВыгружаемыйОбъектСсылка");		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипИсходящегоСообщения) Тогда
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю("Не указан тип сообщения",
				, "ТипИсходящегоСообщения");		
		Возврат;
	КонецЕсли;
			
	СоздатьИсходящееСообщениеНаСервере();
	ДинамическийСписокПриСменеСтраницы(Элементы.СтраницаРучноеУправление);
	Элементы.ОбщийЛогАаптера.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИсходящееСообщениеНаСервере()
	
	ПараметрыСообщения = QIWI_АдаптерОбмен.ИнициализироватьПараметрыДляИсходящейОчереди(ТипИсходящегоСообщения);
	ПараметрыСообщения.Вставить("ВыгружаемыйОбъектСсылка", ВыгружаемыйОбъектСсылка);
	ПараметрыСообщения.Вставить("СсылкаНаСвязанноеСообщение", СсылкаНаСвязанноеСообщение);
	
	Если ЗначениеЗаполнено(КодФормированияПроизвольныхДанных) Тогда
		Попытка
			ПроизвольныеДанные = Неопределено;
			Выполнить(КодФормированияПроизвольныхДанных);
			ПараметрыСообщения.Вставить("ПроизвольныеДанные", ПроизвольныеДанные); 
		Исключение
			ТекстОшибок = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибок, ,
						"КодФормированияПроизвольныхДанных");
		КонецПопытки;
	КонецЕсли;
	
	ИсходящееСообщение = QIWI_АдаптерОбмен.СоздатьИсходящееСообщение(ПараметрыСообщения, ТипИсходящегоСообщения);
	Если Не ЗначениеЗаполнено(ИсходящееСообщение) Тогда
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю("Не удалось создать сообщение. См. лог адаптера");
		Возврат;	
	КонецЕсли;
	
	ТекущееИсходящееСообщение = ИсходящееСообщение;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВИсходящейОчереди(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущееИсходящееСообщение) Тогда 
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю("Не определено исходящее сообщение",
					, "ТекущееИсходящееСообщение");		
		Возврат;
	КонецЕсли; 	
		
	ЗарегистрироватьВИсходящейОчередиНаСервере();
	ДинамическийСписокПриСменеСтраницы(Элементы.СтраницаРучноеУправление);
	Элементы.ОбщийЛогАаптера.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьВИсходящейОчередиНаСервере()
	
	ДанныеОбмена = QIWI_АдаптерОбмен.ИнициализироватьПараметрыДляИсходящейОчереди(ТипИсходящегоСообщения);	
	ДанныеОбмена.Вставить("ВнешняяСистема", ВыбраннаяВнешняяСистема);
	ДанныеОбмена.Вставить("ИсходящееСообщение", ТекущееИсходящееСообщение);
	ДанныеОбмена.Вставить("ВыгружаемыйОбъектСсылка", ВыгружаемыйОбъектСсылка);
	ДанныеОбмена.Вставить("РучнаяРегистрация", Истина);
	
	ДанныеОбмена.Вставить("ТекущийПользователь", QIWI_АдаптерШлюзБСПСервер.ТекущийПользователь());
	QIWI_АдаптерОбмен.ЗарегистрироватьВИсходящуюОчередь(ДанныеОбмена, ТипИсходящегоСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИсходящееСообщение(Команда)
			
	ОбработатьИсходящееСообщениеНаСервере(ТекущееИсходящееСообщение, ТипИсходящегоСообщения);
	ДинамическийСписокПриСменеСтраницы(Элементы.СтраницаРучноеУправление);
	Элементы.ОбщийЛогАаптера.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИсходящееСообщениеНаСервере(ТекущееИсходящееСообщение, ТипИсходящегоСообщения)
			
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ВнешняяСистема КАК ВнешняяСистема,
	|	СообщенияИсходящие.Ссылка КАК ИсходящееСообщение,
	|	СообщенияИсходящие.Ссылка.УникальноеВремяСоздания КАК УникальноеВремяРегистрации,
	|	&КонкретныйТипСообщения КАК ТипИсходящегоСообщения
	|ПОМЕСТИТЬ ПулИсходящих
	|ИЗ
	|	Справочник.QIWI_АдаптерСообщенияИсходящие КАК СообщенияИсходящие
	|ГДЕ
	|	СообщенияИсходящие.Ссылка = &ТекущееИсходящееСообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТипИсходящегоСообщения.Ссылка КАК ТипИсходящегоСообщения
	|ПОМЕСТИТЬ ТипыСообщений
	|ИЗ
	|	Справочник.QIWI_АдаптерТипИсходящегоСообщения КАК ТипИсходящегоСообщения
	|ГДЕ
	|	ТипИсходящегоСообщения.Ссылка = &КонкретныйТипСообщения"
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ QIWI_АдаптерОбмен.ТекстЗапросаИсходящихСНастройкамиОбработки();
	
	Запрос.УстановитьПараметр("РежимОтладки", Истина);
	Запрос.УстановитьПараметр("ВнешняяСистема", ВыбраннаяВнешняяСистема);
	Запрос.УстановитьПараметр("КонкретныйТипСообщения", ТипИсходящегоСообщения);
	Запрос.УстановитьПараметр("ТекущееИсходящееСообщение", ТекущееИсходящееСообщение);
	Если Не ЗначениеЗаполнено(ТекущаяНастройкаДляИсходящего) Тогда
		Запрос.УстановитьПараметр("КонкретнаяНастройка", ТекущаяНастройкаДляИсходящего);
	Иначе 
		Запрос.УстановитьПараметр("КонкретнаяНастройка", Неопределено);
	КонецЕсли;	
		
	Запрос.Текст = ТекстЗапроса; 
	
	QIWI_АдаптерОбмен.ОбработкаИсходящихСообщений(Запрос);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьСообщениеВоВнешнююСистему(Команда)
	
	Если Не ЗначениеЗаполнено(ВыбраннаяВнешняяСистема) Тогда
		ТекстОшибки = "Не выбрана внешняя система";
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущееИсходящееСообщение) Тогда
		ТекстОшибки = "Не выбрано сообщение для выгрузки";
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);		
		Возврат;
	КонецЕсли;
	
	ВыгрузитьСообщениеВоВнешнююСистемуНаСервере();
	Элементы.ОбщийЛогАаптера.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьСообщениеВоВнешнююСистемуНаСервере()
			
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВнешниеСистемы.Ссылка КАК ВнешняяСистема,
	|	ВнешниеСистемы.ПараметрыПодключения КАК ПараметрыПодключенияСсылка,
	|	СообщенияИсходящие.Ссылка КАК ИсходящееСообщение,
	|	СообщенияИсходящие.Ссылка.УникальноеВремяСоздания КАК УникальноеВремяРегистрации,
	|	&КонкретныйТипСообщения КАК ТипИсходящегоСообщения
	|ПОМЕСТИТЬ ПулИсходящих
	|ИЗ
	|	Справочник.QIWI_АдаптерСообщенияИсходящие КАК СообщенияИсходящие
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланОбмена.QIWI_АдаптерВнешниеСистемы КАК ВнешниеСистемы
	|		ПО (ВнешниеСистемы.Ссылка = &ВнешняяСистема)
	|ГДЕ
	|	СообщенияИсходящие.Ссылка = &ТекущееИсходящееСообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТипИсходящегоСообщения.Ссылка КАК ТипИсходящегоСообщения
	|ПОМЕСТИТЬ ТипыСообщений
	|ИЗ
	|	Справочник.QIWI_АдаптерТипИсходящегоСообщения КАК ТипИсходящегоСообщения
	|ГДЕ
	|	ТипИсходящегоСообщения.Ссылка = &КонкретныйТипСообщения"
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ QIWI_АдаптерОбмен.ТекстЗапросаИсходящихСНастройкамиВыгрузки();
	
	Запрос.УстановитьПараметр("РежимОтладки", Истина);
	Запрос.УстановитьПараметр("ВнешняяСистема", ВыбраннаяВнешняяСистема);
	Запрос.УстановитьПараметр("ТекущийУзел",  ПланыОбмена.QIWI_АдаптерВнешниеСистемы.ЭтотУзел());
	Запрос.УстановитьПараметр("КонкретныйТипСообщения", ТипИсходящегоСообщения);
	Запрос.УстановитьПараметр("ТекущееИсходящееСообщение", ТекущееИсходящееСообщение);
	Если Не ЗначениеЗаполнено(ТекущаяНастройкаДляИсходящего) Тогда
		Запрос.УстановитьПараметр("КонкретнаяНастройка", ТекущаяНастройкаДляИсходящего);
	Иначе 
		Запрос.УстановитьПараметр("КонкретнаяНастройка", Неопределено);
	КонецЕсли;	
		
	Запрос.Текст = ТекстЗапроса; 
	
	QIWI_АдаптерОбмен.ВыгрузитьСообщенияВоВнешнююСистему(Запрос, ВыбраннаяВнешняяСистема); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОбъектВФайл(Команда)
	
	Если ПустаяСтрока(ПутьДляВыгрузкиВФайл) Тогда
		ТекстОшибки = "Укажите путь к файлу";
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущееИсходящееСообщение) Тогда
		ТекстОшибки = "Не указано исходящее сообщение";
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);		
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется выгрузка данных. Пожалуйста, подождите...'"));
	СтруктураДанных = Новый Структура("ВыгружаемыйОбъектСсылка", ВыгружаемыйОбъектСсылка);
	
	АдресФайлаДанныхВХранилище = ВыгрузитьДанныеВФайлНаСервере(СтруктураДанных, ТекущееИсходящееСообщение);
	
	Если АдресФайлаДанныхВХранилище = Неопределено
		ИЛИ АдресФайлаДанныхВХранилище = "" Тогда
		ТекстОшибки = "Не удалось выполнить выгрузку в файл";
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПараметрыДиалогаПолученияФайлов = Новый ПараметрыДиалогаПолученияФайлов(Заголовок, Ложь);
	НачатьПолучениеФайлаССервера(АдресФайлаДанныхВХранилище, ПутьДляВыгрузкиВФайл, ПараметрыДиалогаПолученияФайлов);
	
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДанныеВФайлНаСервере(СтруктураДанных, ТекущееИсходящееСообщение)
		
	// Если выгрузка по КД
	// ... 
	
	// Если выгрузка по мэпингу ()
	
	// Если выгрузка программным кодом
		
	ПутьВременногоФайлаВыгрузки = ПолучитьИмяВременногоФайла("txt");
	
	ДанныеИзХранилища = QIWI_АдаптерОбмен.ПолучитьДанныеФорматаТранспорта(ТекущееИсходящееСообщение);
	ДанныеВФорматеТранспорта = ДанныеИзХранилища.Получить();
	
	Если ДанныеВФорматеТранспорта = Неопределено Тогда
		ТекстОшибки = "Данные транспорта пустые.";
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);		
		Возврат Неопределено; 	
	ИначеЕсли ТипЗнч(ДанныеВФорматеТранспорта) = Тип("Строка") Тогда
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.УстановитьТекст(ДанныеВФорматеТранспорта);
		ТекстДок.Записать(ПутьВременногоФайлаВыгрузки, "UTF-8");
	Иначе     
		ТекстОшибки = "Данные транспорта невозможно сохранить в файл";
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);		
		Возврат Неопределено;
	КонецЕсли;	
	
	АдресФайлаДанных = ПоместитьВыгрузкуВоВременноеХранилище(ПутьВременногоФайлаВыгрузки);
	
	Возврат АдресФайлаДанных;
	
КонецФункции

&НаСервере
Функция ПоместитьВыгрузкуВоВременноеХранилище(ИмяФайлаОбменаНаСервере)
	
	ФайлДД = Новый ДвоичныеДанные(ИмяФайлаОбменаНаСервере);
	
	АдресФайлаДанных = ПоместитьВоВременноеХранилище(ФайлДД, УникальныйИдентификатор);
	УдалитьФайлы(ИмяФайлаОбменаНаСервере);

	Возврат АдресФайлаДанных;
	
КонецФункции

#КонецОбласти // РаботаСИсходящими

#Область РаботаСВходящими //********************************************

&НаКлиенте
Процедура СоздатьВходящееСообщение(Команда)

	Если Не ЗначениеЗаполнено(ВыбраннаяВнешняяСистема) Тогда
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю("Не выбрана внешняя система",
				, "ВыбраннаяВнешняяСистема");		
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТипВходящегоСообщения) Тогда
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю("Не указан тип сообщения",
				, "ТипВходящегоСообщения");		
		Возврат;
	КонецЕсли;
		
	СоздатьВходящееСообщениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВходящееСообщениеНаСервере()
	
	// Получение настроек типа сообщения	
	НастройкиВходящегоОбращения = QIWI_АдаптерОбмен.ПолучитьНастройкиВходящего(ТипВходящегоСообщения);	
	Если Не ЗначениеЗаполнено(НастройкиВходящегоОбращения.НастройкаСсылка) Тогда
		ИнфоДляВнешнейСистемы = " Не удалось определить настройки для входящего сообщения во внешней системе.";
		QIWI_АдаптерВызовСервера.ВыполнитьЛогирование("Входящий запрос", УровеньЖурналаРегистрации.Ошибка,
														ИнфоДляВнешнейСистемы, , Истина);
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ИнфоДляВнешнейСистемы);												
	КонецЕсли;
	
	ИдентификаторСообщенияВС = ?(Не ЗначениеЗаполнено(ИдентификаторСообщенияВС),
									Новый УникальныйИдентификатор, ИдентификаторСообщенияВС); 
									
	НастройкиВходящегоОбращения.Вставить("ИдентификаторСообщенияВС", ИдентификаторСообщенияВС);
			
	// Создание входящего сообщения
	ПараметрыОбмена	= Новый Структура();
	ПараметрыОбмена.Вставить("ТипВходящегоСообщения", 	 ТипВходящегоСообщения);
	ПараметрыОбмена.Вставить("ВходящиеДанные", 			 ВходящееСообщениеСтрокой);
	ПараметрыОбмена.Вставить("ТипСодержимого", 			 ТипСодержимого);
	
	Попытка
		ТекущееВходящееСообщение = QIWI_АдаптерОбмен.СоздатьВходящееСообщение(НастройкиВходящегоОбращения,
								ПараметрыОбмена);			
	Исключение
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаголовокОшибки = "Ошибка создания сообщения входящего";
		QIWI_АдаптерВызовСервера.ВыполнитьЛогирование(ЗаголовокОшибки, УровеньЖурналаРегистрации.Ошибка, ТекстОшибки,
									ТипВходящегоСообщения, Истина);
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ТекстОшибки);	
		
	КонецПопытки;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьВоВходящейОчереди(Команда)
	
	Если Не ЗначениеЗаполнено(ВыбраннаяВнешняяСистема) Тогда
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю("Не выбрана внешняя система",
				, "ВыбраннаяВнешняяСистема");		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущееВходящееСообщение) Тогда
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю("Не выбрано входящее сообщение",
				, "ТекущееВходящееСообщение");		
		Возврат;
	КонецЕсли;
	
	ЗарегистрироватьВоВходящейОчередиНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьВоВходящейОчередиНаСервере()
	
	// Получение настроек типа сообщения	
	НастройкиВходящегоОбращения = QIWI_АдаптерОбмен.ПолучитьНастройкиВходящего(ТипВходящегоСообщения);	
	Если Не ЗначениеЗаполнено(НастройкиВходящегоОбращения.НастройкаСсылка) Тогда
		ИнфоДляВнешнейСистемы = " Не удалось определить настройки для входящего сообщения во внешней системе.";
		QIWI_АдаптерВызовСервера.ВыполнитьЛогирование("Входящий запрос", УровеньЖурналаРегистрации.Ошибка,
														ИнфоДляВнешнейСистемы, , Истина);
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю(ИнфоДляВнешнейСистемы);
	КонецЕсли;
	
	ИдентификаторСообщенияВС = ?(Не ЗначениеЗаполнено(ИдентификаторСообщенияВС),
									Новый УникальныйИдентификатор, ИдентификаторСообщенияВС); 
	
	ПараметрыОбмена = Новый Структура;
	// Фиксируем уникальное время для очереди до выполнения последующих процедур и функций
	ПараметрыОбмена.Вставить("УникальноеВремяРегистрации", ТекущаяУниверсальнаяДатаВМиллисекундах());	
	ПараметрыОбмена.Вставить("ВнешняяСистема", 			 ВыбраннаяВнешняяСистема);
	ПараметрыОбмена.Вставить("ВходящееСообщение", 		 ТекущееВходящееСообщение);
	ПараметрыОбмена.Вставить("ТипВходящегоСообщения", 	 ТипВходящегоСообщения);
	ПараметрыОбмена.Вставить("ВходящиеДанные", 			 ВходящееСообщениеСтрокой);
	ПараметрыОбмена.Вставить("ТипСодержимого", 			 ТипСодержимого);
	ПараметрыОбмена.Вставить("ИдентификаторСообщенияВС", ИдентификаторСообщенияВС);
	ПараметрыОбмена.Вставить("ИдентификаторПроцесса", 	 ИдентификаторПроцесса);
		
	QIWI_АдаптерОбмен.ЗарегистрироватьВоВходящуюОчередь(ПараметрыОбмена, НастройкиВходящегоОбращения);	
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьВходящееСообщение(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущееВходящееСообщение) Тогда
		QIWI_АдаптерШлюзБСПКлиентСервер.СообщитьПользователю("Не выбрано входящее сообщение",
				, "ТекущееВходящееСообщение");		
		Возврат;
	КонецЕсли;
	
	ОбработатьВходящееСообщениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВходящееСообщениеНаСервере()	
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ВнешняяСистема КАК ВнешняяСистема,
	|	СообщенияВходящие.Ссылка КАК ВходящееСообщение,
	|	СообщенияВходящие.Ссылка.УникальноеВремяСоздания КАК УникальноеВремяРегистрации,
	|	&КонкретныйТипСообщения КАК ТипВходящегоСообщения
	|ПОМЕСТИТЬ ПулВходящих
	|ИЗ
	|	Справочник.QIWI_АдаптерСообщенияВходящие КАК СообщенияВходящие
	|ГДЕ
	|	СообщенияВходящие.Ссылка = &ТекущееВходящееСообщение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТипВходящегоСообщения.Ссылка КАК ТипВходящегоСообщения
	|ПОМЕСТИТЬ ТипыСообщений
	|ИЗ
	|	Справочник.QIWI_АдаптерТипВходящегоСообщения КАК ТипВходящегоСообщения
	|ГДЕ
	|	ТипВходящегоСообщения.Ссылка = &КонкретныйТипСообщения"
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ QIWI_АдаптерОбмен.ТекстЗапросаВходящихСНастройкамиОбработки() 
	
	// Разделитель
	+ "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"
	+ 

	"ВЫБРАТЬ
	|	ПулВходящих.ВходящееСообщение КАК ВходящееСообщение,
	|	НастройкиПоТипамСообщений.НастройкаСсылка КАК НастройкаСсылка,
	|	ЕСТЬNULL(ДанныеВФорматеТранспорта.ДанныеОбмена, НЕОПРЕДЕЛЕНО) КАК ДанныеВФорматеТранспорта,
	|	ЕСТЬNULL(ДанныеВФорматеТранспорта.ОписаниеФормата, """") КАК ОписаниеФормата,
	|	ВЫРАЗИТЬ(ПулВходящих.ВходящееСообщение КАК Справочник.QIWI_АдаптерСообщенияВходящие).СчетчикПопытокОбработки КАК ИзрасходованоПопыток
	|ИЗ
	|	ПулВходящих КАК ПулВходящих
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.QIWI_АдаптерДанныеВФорматеТранспорта КАК ДанныеВФорматеТранспорта
	|		ПО ПулВходящих.ВходящееСообщение = ДанныеВФорматеТранспорта.Сообщение
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиПоТипамСообщений КАК НастройкиПоТипамСообщений
	|		ПО ПулВходящих.ТипВходящегоСообщения = НастройкиПоТипамСообщений.ТипВходящегоСообщения";	
	
	Запрос.УстановитьПараметр("РежимОтладки", Истина);
	Запрос.УстановитьПараметр("ВнешняяСистема", ВыбраннаяВнешняяСистема);
	Запрос.УстановитьПараметр("ТекущееВходящееСообщение", ТекущееВходящееСообщение);
	Запрос.УстановитьПараметр("КонкретныйТипСообщения", ТипВходящегоСообщения);
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса); 
		
	// ──────────────────────────────
	// Определяем поля настроек
	ОператорВыбора = СхемаЗапроса.ПакетЗапросов[4].Операторы[0];	
	QIWI_АдаптерОбмен.ДобавитьПоляВыборкиНастроекВходящих(ОператорВыбора);
			
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();	
	Запрос.Текст = ТекстЗапроса; 
	
	QIWI_АдаптерОбмен.ОбработкаВходящихСообщений(Запрос);
	
КонецПроцедуры

#КонецОбласти // РаботаСВходящими

#Область Вспомогательное //****************************************

&НаКлиенте
Процедура ПутьДляВыгрузкиВФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, ПутьДляВыгрузкиВФайл, Ложь, , , Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Элемент, ИмяФайлаОбмена, ПроверятьСуществование, Знач РасширениеФайла = "json",	
						АрхивироватьФайлДанных = Ложь, РежимОбмена)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
	Если АрхивироватьФайлДанных Тогда
		
		ДиалогВыбораФайла.Фильтр = "Архивный файл данных (*.zip)|*.zip";
		ДиалогВыбораФайла.Расширение = "zip";		
		
	ИначеЕсли РасширениеФайла = "txt" Тогда
		
		ДиалогВыбораФайла.Фильтр = "Файл протокола обмена (*.txt)|*.txt";
		ДиалогВыбораФайла.Расширение = "txt";
		
	ИначеЕсли РасширениеФайла = "json" Тогда
		
		ДиалогВыбораФайла.Фильтр = "Файл данных (*.json)|*.json";
		ДиалогВыбораФайла.Расширение = "json";
		
	ИначеЕсли РасширениеФайла = "xml" Тогда
		
		ДиалогВыбораФайла.Фильтр = "Файл данных (*.xml)|*.xml";
		ДиалогВыбораФайла.Расширение = "xml";
		
	Иначе
		
		ДиалогВыбораФайла.Фильтр = "Файл данных (*.*)|*.*";
		
	КонецЕсли;
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда 		
		ИмяФайлаОбмена = ДиалогВыбораФайла.ПолноеИмяФайла;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИсходящегоСообщенияПриИзменении(Элемент)
	ТипИсходящегоСообщенияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТипИсходящегоСообщенияПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиСрезПоследних.НастройкаДляСообщения КАК НастройкаСсылка
	|ПОМЕСТИТЬ ВТ_Настройка
	|ИЗ
	|	РегистрСведений.QIWI_АдаптерИспользуемыеНастройкиДляСообщений.СрезПоследних(, ТипСообщения = &ТипСообщения) КАК НастройкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Настройка.НастройкаСсылка КАК НастройкаСсылка
	|ИЗ
	|	ВТ_Настройка КАК ВТ_Настройка";
	Запрос.УстановитьПараметр("ТипСообщения", ТипИсходящегоСообщения);		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ТекущаяНастройкаДляИсходящего = Выборка.НастройкаСсылка;		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницыАдминистрированияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ДинамическийСписокПриСменеСтраницы(ТекущаяСтраница);	
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыРегистровПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
	ДинамическийСписокПриСменеСтраницы(ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписокПриСменеСтраницы(ТекущаяСтраница)
		
	ИмяДинамическогоСписка = СтраницыДС.Получить(ТекущаяСтраница.Имя);
	
	Если ИмяДинамическогоСписка <> Неопределено Тогда
		
		УстановленПараметрФормирования = Этаформа[ИмяДинамическогоСписка].Параметры.Элементы.Найти("Формировать");
		УстановленПараметрФормирования.Использование = Истина;
		УстановленПараметрФормирования.Значение = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаНаЗаписьОчередиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("ИсходящееСообщение", ТекущееИсходящееСообщение);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("РегистрСведений.QIWI_АдаптерОчередьИсходящих.ФормаСписка", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИсходящиеСообщения(Команда)
		
	ПараметрыКонсолиЗапросов = Новый Структура;	
	ПараметрыКонсолиЗапросов.Вставить("ВариантИспользованияКонсолиЗапросов", 0);
	ПараметрыКонсолиЗапросов.Вставить("ПутьКВнешнейКонсолиЗапросов", "");
	
	ОткрытьФорму("Обработка.QIWI_АдаптерАдминистрирование.Форма.ВыборИзЗапроса", ПараметрыКонсолиЗапросов, ЭтотОбъект);
	   
КонецПроцедуры

&НаКлиенте
Процедура ВыгружаемыйОбъектСсылкаПриИзменении(Элемент)		
	GUIDОбъекта = ВыгружаемыйОбъектСсылка.УникальныйИдентификатор();	
КонецПроцедуры

&НаКлиенте
Процедура ОбщийЛогАаптераВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Поле.Имя = "ОбщийЛогАаптераСообщение" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Если ТипЗнч(ТекДанные.Сообщение) = Тип("СправочникСсылка.QIWI_АдаптерСообщенияИсходящие") Тогда
				ПараметрыОткрытия = Новый Структура("Ключ", ТекДанные.Сообщение);
				ОткрытьФорму("Справочник.QIWI_АдаптерСообщенияИсходящие.Форма.ФормаЭлемента", ПараметрыОткрытия);
			ИначеЕсли ТипЗнч(ТекДанные.Сообщение) = Тип("СправочникСсылка.QIWI_АдаптерСообщенияВходящие") Тогда
				ПараметрыОткрытия = Новый Структура("Ключ", ТекДанные.Сообщение);
				ОткрытьФорму("Справочник.QIWI_АдаптерСообщенияВходящие.Форма.ФормаЭлемента", ПараметрыОткрытия);
			Иначе	
				Возврат;
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонсольРегламентныхЗаданий(Команда)
	
	//@skip-warning
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма",
	             ,
	             ЭтотОбъект,
	             Ложь);
КонецПроцедуры
			 
#КонецОбласти // Вспомогательное

&НаКлиенте
Процедура ДоступностьАдаптера(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДоступностьАдаптера", ЭтотОбъект);
	ОткрытьФорму("Обработка.QIWI_АдаптерАдминистрирование.Форма.ФормаДоступностиРеглЗаданий",
						, ЭтаФорма, , , ,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьДоступностьАдаптера(Результат, ДопПараметры) Экспорт	
	ОбновитьДоступностьАдаптераНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьАдаптераНаСервере()
		
	Кнопка = Элементы.ДоступностьАдаптера;
	АдаптерДоступен = QIWI_АдаптерОбмен.РазрешитьРаботуАдаптера();
	ЗаголовокКнопки = ?(АдаптерДоступен, "Адаптер включен", "Адаптер заблокирован");
	Картинка = ?(АдаптерДоступен, БиблиотекаКартинок.QIWI_АдаптерКругЗеленый, БиблиотекаКартинок.QIWI_АдаптерКругКрасный);
	Кнопка.Заголовок = ЗаголовокКнопки;
	Кнопка.Пометка = АдаптерДоступен; 
	Кнопка.Картинка = Картинка;
	
КонецПроцедуры	

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область ИнтерфейсНавигация //************************************************

&НаСервере
Процедура ОтчетПоИнтеграционнымВзаимодействиямНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	СхемаКомпоновкиДанных 	= ОбработкаОбъект.ПолучитьМакет("ОтчетПоИнтеграционнымВзаимодействиям");
	НастройкиКомпоновки 	= СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ДанныеРасшифровки 		= Новый ДанныеРасшифровкиКомпоновкиДанных;

	
	ПараметрыДанныхКомпоновки = НастройкиКомпоновки.ПараметрыДанных;
	ВнешниеСистемы = Новый Массив;
	ВнешниеСистемы.Добавить(ПланыОбмена.QIWI_АдаптерВнешниеСистемы.ПустаяСсылка());
	ВнешниеСистемы.Добавить(ВыбраннаяВнешняяСистема);
	ПараметрыДанныхКомпоновки.УстановитьЗначениеПараметра("ВнешняяСистема", ВнешниеСистемы);
	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки, ДанныеРасшифровки, , );
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ОтчетИнтеграционныхПроцессов);
	
	ОтчетИнтеграционныхПроцессов.Очистить();	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоИнтеграционнымВзаимодействиям(Команда)
	ОтчетПоИнтеграционнымВзаимодействиямНаСервере();
КонецПроцедуры 

&НаКлиенте
Процедура ИнтерфейсКартаВыбор(Элемент)
	
	ТекущийКубик = Элементы.КартаОбъектов.ТекущийЭлемент;
	
	Если ТекущийКубик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийКубик.Имя = "ПараметрыПодключений" Тогда
		ОткрытьФорму("Справочник.QIWI_АдаптерПодключенияКВнешнимСистемам.ФормаСписка");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КартаНастройкиВыбор(Элемент)
	
    ТекущийКубик = Элементы.КартаНастройки.ТекущийЭлемент;
	
	Если ТекущийКубик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФорме = СоответствиеОбъектовИФорм.Получить(ТекущийКубик.Имя);
	
	Если ПутьКФорме <> Неопределено Тогда
		ОткрытьФорму(ПутьКФорме);
	КонецЕсли;
	
КонецПроцедуры
        
#КонецОбласти  // ИнтерфейсНавигация
